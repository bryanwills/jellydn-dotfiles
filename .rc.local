" UI
syntax on
set foldlevel=1
set foldmethod=syntax
set relativenumber
set guifont=Operator\ Mono:h12
colorscheme cobalt2

" Snips
let g:snips_author = "Kaka Huynh"

" NERDTree
let g:NERDTreeWinSize = 40
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__','node_modules','flow-typed','.git', 'build']

" Asynchronous Lint Engine (ALE)
let g:airline#extensions#ale#enabled = 1

" Limit linters used for JavaScript.
let g:ale_linters = {
\  'javascript': ['flow', 'eslint', 'prettier']
\}
let g:ale_fixers = ['prettier', 'eslint']
let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
let g:ale_javascript_prettier_use_local_config = 1

highlight clear ALEErrorSign
highlight clear ALEWarningSign

let g:ale_sign_error = 'X' " could use emoji
let g:ale_sign_warning = '?' " could use emoji
let g:ale_statusline_format = ['X %d', '? %d', '']
" %linter% is the name of the linter that provided the message
" %s is the error or warning message
let g:ale_echo_msg_format = '%linter% says %s'

" Map keys to navigate between lines with errors and warnings.
nnoremap <leader>an :ALENextWrap<cr>
nnoremap <leader>ap :ALEPreviousWrap<cr>
nmap <leader>d <Plug>(ale_fix)

" Test
nmap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nmap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nmap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nmap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nmap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g

" JavaScript
let g:javascript_plugin_flow = 1
let g:javascript_plugin_jsdoc = 1

" Autocomplete
let g:deoplete#enable_at_startup = 1

function! StrTrim(txt)
  return substitute(a:txt, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
endfunction

let g:flow_path = StrTrim(system('PATH=$(npm bin):$PATH && which flow'))

if g:flow_path != 'flow not found'
  let g:deoplete#sources#flow#flow_bin = g:flow_path
endif

autocmd BufNewFile,BufRead *.js.flow setlocal filetype=javascript.jsx

"" fzf.vim
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__,node_modules,build

" grep.vim
let Grep_Skip_Dirs = '.git node_modules build'

"" jsdo
nmap <leader>j <Plug>(jsdoc)